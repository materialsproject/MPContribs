AWSTemplateFormatVersion: '2010-09-09'
Description: The baseline resources used to create a Fargate environment
             to launch containerized applications in.
Parameters:
  PipelineName:
    Type: String
  EnvironmentName:
    Type: String
  NetworkNumber:
    Type: String
  DBPassword:
    NoEcho: 'true'
    Type: String
    MinLength: '8'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Join [ '.', [ '192.168', !Ref 'NetworkNumber', '0/24' ] ]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/VPC'
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Join [ '.', [ '192.168', !Ref 'NetworkNumber', '0/26' ] ]
      AvailabilityZone: !Join [ '', [!Ref 'AWS::Region', 'a']]
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/PublicSubnetOne'
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Join [ '.', [ '192.168', !Ref 'NetworkNumber', '64/26' ] ]
      AvailabilityZone: !Join [ '', [!Ref 'AWS::Region', 'b']]
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/PublicSubnetTwo'
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Join [ '.', [ '192.168', !Ref 'NetworkNumber', '128/26' ] ]
      AvailabilityZone: !Join [ '', [!Ref 'AWS::Region', 'c']]
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/PrivateSubnetOne'
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Join [ '.', [ '192.168', !Ref 'NetworkNumber', '192/26' ] ]
      AvailabilityZone: !Join [ '', [!Ref 'AWS::Region', 'd']]
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/PrivateSubnetTwo'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/InternetGateway'
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/PublicRouteTable'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/PrivateRouteTable'
  PrivateSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetOne
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetTwo
      RouteTableId: !Ref PrivateRouteTable

  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref 'PublicSubnetOne'
        - !Ref 'PublicSubnetTwo'
      Type: network

  NetworkLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckPort: 8001
      Port: 8000
      Protocol: TCP
      TargetType: ip
      VpcId: !Ref 'VPC'

  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing services
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8001
          ToPort: 8001
          CidrIp: 0.0.0.0/0
  PublicSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'PublicSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'PublicSecurityGroup'
  PublicSecurityGroupIngressFromPrivate:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from containers in private security group
      GroupId: !Ref 'PublicSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'PrivateSecurityGroup'

  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the private services
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref 'PublicSecurityGroup'
        - IpProtocol: tcp
          FromPort: 8081
          ToPort: 8081
          SourceSecurityGroupId: !Ref 'PublicSecurityGroup'
        - IpProtocol: tcp
          FromPort: 8082
          ToPort: 8082
          SourceSecurityGroupId: !Ref 'PublicSecurityGroup'
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          SourceSecurityGroupId: !Ref 'PublicSecurityGroup'
        - IpProtocol: tcp
          FromPort: 5001
          ToPort: 5001
          SourceSecurityGroupId: !Ref 'PublicSecurityGroup'
        - IpProtocol: tcp
          FromPort: 5002
          ToPort: 5002
          SourceSecurityGroupId: !Ref 'PublicSecurityGroup'
  PrivateSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'PrivateSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'PrivateSecurityGroup'

  ControlPlaneSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Communication between the control plane and worker nodegroups
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/ControlPlaneSecurityGroup'
  ClusterSharedNodeSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Communication between all nodes in the cluster
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/ClusterSharedNodeSecurityGroup'

  #IngressDefaultClusterToNodeSG:
  #  Type: 'AWS::EC2::SecurityGroupIngress'
  #  Properties:
  #    Description: Allow managed and unmanaged nodes to communicate with each other (all ports)
  #    FromPort: 0
  #    GroupId: !Ref ClusterSharedNodeSecurityGroup
  #    IpProtocol: '-1'
  #    SourceSecurityGroupId: !GetAtt ControlPlane.ClusterSecurityGroupId
  #    ToPort: 65535
  #IngressInterNodeGroupSG:
  #  Type: 'AWS::EC2::SecurityGroupIngress'
  #  Properties:
  #    Description: Allow nodes to communicate with each other (all ports)
  #    FromPort: 0
  #    GroupId: !Ref ClusterSharedNodeSecurityGroup
  #    IpProtocol: '-1'
  #    SourceSecurityGroupId: !Ref ClusterSharedNodeSecurityGroup
  #    ToPort: 65535
  #IngressNodeToDefaultClusterSG:
  #  Type: 'AWS::EC2::SecurityGroupIngress'
  #  Properties:
  #    Description: Allow unmanaged nodes to communicate with control plane (all ports)
  #    FromPort: 0
  #    GroupId: !GetAtt ControlPlane.ClusterSecurityGroupId
  #    IpProtocol: '-1'
  #    SourceSecurityGroupId: !Ref ClusterSharedNodeSecurityGroup
  #    ToPort: 65535

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to Database
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref 'PublicSecurityGroup'
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref 'PrivateSecurityGroup'
      VpcId: !Ref 'VPC'

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets available for the RDS DB Instance
      SubnetIds:
        - !Ref 'PrivateSubnetOne'
        - !Ref 'PrivateSubnetTwo'

  PostgresDB:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: postgres
      DBName: kong
      MasterUsername: kong
      DBInstanceClass: db.t2.micro
      AllocatedStorage: 5
      MasterUserPassword: !Ref 'DBPassword'
      DBSubnetGroupName: !Ref 'DBSubnetGroup'
      PubliclyAccessible: false
      EngineVersion: 9.6.8
      DBSnapshotIdentifier: !Ref 'AWS::NoValue'
      MultiAZ: false
      StorageEncrypted: false
      StorageType: gp2
      VPCSecurityGroups:
        - !Ref 'DBSecurityGroup'
    DeletionPolicy: Snapshot

  ElastiCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Cache Subnet Group
      SubnetIds:
        - !Ref 'PrivateSubnetOne'
        - !Ref 'PrivateSubnetTwo'

  ElastiCacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      AutoMinorVersionUpgrade: true
      Engine: redis
      CacheNodeType: cache.t2.micro
      NumCacheNodes: 1
      CacheSubnetGroupName: !Ref 'ElastiCacheSubnetGroup'
      VpcSecurityGroupIds:
        - !GetAtt DBSecurityGroup.GroupId

  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref 'VPC'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref 'PublicRouteTable'
        - !Ref 'PrivateRouteTable'
  EcrEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref 'VPC'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.dkr'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref 'PublicSubnetOne'
        - !Ref 'PublicSubnetTwo'
        - !Ref 'PrivateSubnetOne'
        - !Ref 'PrivateSubnetTwo'
      SecurityGroupIds:
        - !Ref 'PublicSecurityGroup'
        - !Ref 'PrivateSecurityGroup'
  EcrApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref 'VPC'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.api'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref 'PublicSubnetOne'
        - !Ref 'PublicSubnetTwo'
        - !Ref 'PrivateSubnetOne'
        - !Ref 'PrivateSubnetTwo'
      SecurityGroupIds:
        - !Ref 'PublicSecurityGroup'
        - !Ref 'PrivateSecurityGroup'
  SnsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref 'VPC'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.sns'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref 'PrivateSubnetOne'
        - !Ref 'PrivateSubnetTwo'
      SecurityGroupIds:
        - !Ref 'PrivateSecurityGroup'
  LogsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref 'VPC'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.logs'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref 'PublicSubnetOne'
        - !Ref 'PublicSubnetTwo'
        - !Ref 'PrivateSubnetOne'
        - !Ref 'PrivateSubnetTwo'
      SecurityGroupIds:
        - !Ref 'PublicSecurityGroup'
        - !Ref 'PrivateSecurityGroup'
  DatadogEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref 'VPC'
      ServiceName: com.amazonaws.vpce.us-east-1.vpce-svc-056576c12b36056ca
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref 'PublicSubnetOne'
        - !Ref 'PublicSubnetTwo'
        - !Ref 'PrivateSubnetOne'
        - !Ref 'PrivateSubnetTwo'
      SecurityGroupIds:
        - !Ref 'PublicSecurityGroup'
        - !Ref 'PrivateSecurityGroup'

  ECSCluster:
    Type: AWS::ECS::Cluster

  #ControlPlane:
  #  Type: 'AWS::EKS::Cluster'
  #  Properties:
  #    Name: JhubCluster
  #    ResourcesVpcConfig:
  #      SecurityGroupIds:
  #        - !Ref ControlPlaneSecurityGroup
  #      SubnetIds:
  #        - !Ref PublicSubnetOne
  #        - !Ref PublicSubnetTwo
  #        - !Ref PrivateSubnetOne
  #        - !Ref PrivateSubnetTwo
  #    RoleArn: !GetAtt EKSRole.Arn
  #    Version: '1.14'

  # This is an IAM role which authorizes ECS to manage resources on your
  # account on your behalf, such as updating your load balancer with the
  # details of where your containers are, so that traffic can reach your
  # containers.
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Rules which allow ECS to attach network interfaces to instances
              # on your behalf in order for awsvpc networking mode to work right
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'

              # Rules which allow ECS to update load balancers on your behalf
              # with the information sabout how to send traffic to your containers
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'

  # This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                # Allow the ECS tasks to start tasks (JHub)
                - "ecs:RunTask"
                - "ecs:StopTask"
                - "ecs:DescribeTasks"
                - "iam:PassRole"
              Resource: '*'

  #EKSRole:
  #  Type: 'AWS::IAM::Role'
  #  Properties:
  #    AssumeRolePolicyDocument:
  #      Statement:
  #        - Action:
  #            - 'sts:AssumeRole'
  #          Effect: Allow
  #          Principal:
  #            Service:
  #              - eks.amazonaws.com
  #              - eks-fargate-pods.amazonaws.com
  #            AWS: !Sub arn:aws:iam::${AWS::AccountId}:user/Administrator
  #      Version: 2012-10-17
  #    ManagedPolicyArns:
  #      - 'arn:aws:iam::aws:policy/AmazonEKSServicePolicy'
  #      - 'arn:aws:iam::aws:policy/AmazonEKSClusterPolicy'
  #    Policies:
  #      - PolicyName: !Sub '${AWS::StackName}-CloudWatchMetricsPolicy'
  #        PolicyDocument:
  #          Statement:
  #            - Action:
  #                - 'cloudwatch:PutMetricData'
  #              Effect: Allow
  #              Resource: '*'
  #          Version: 2012-10-17
  #      - PolicyName: !Sub '${AWS::StackName}-NLBPolicy'
  #        PolicyDocument:
  #          Statement:
  #            - Action:
  #                - 'elasticloadbalancing:*'
  #                - 'ec2:CreateSecurityGroup'
  #                - 'ec2:Describe*'
  #              Effect: Allow
  #              Resource: '*'
  #          Version: 2012-10-17

  #FargatePodExecutionRole:
  #  Type: 'AWS::IAM::Role'
  #  Properties:
  #    AssumeRolePolicyDocument:
  #      Statement:
  #        - Action:
  #            - 'sts:AssumeRole'
  #          Effect: Allow
  #          Principal:
  #            Service:
  #              - eks.amazonaws.com
  #              - eks-fargate-pods.amazonaws.com
  #      Version: 2012-10-17
  #    ManagedPolicyArns:
  #      - 'arn:aws:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy'

  #NATGateway:
  #  Type: 'AWS::EC2::NatGateway'
  #  Properties:
  #    AllocationId: !GetAtt NATIP.AllocationId
  #    SubnetId: !Ref SubnetPublicUSEAST1C
  #    Tags:
  #      - Key: Name
  #        Value: !Sub '${AWS::StackName}/NATGateway'
  #NATIP:
  #  Type: 'AWS::EC2::EIP'
  #  Properties:
  #    Domain: vpc
  #NATPrivateSubnetRouteUSEAST1B:
  #  Type: 'AWS::EC2::Route'
  #  Properties:
  #    DestinationCidrBlock: 0.0.0.0/0
  #    NatGatewayId: !Ref NATGateway
  #    RouteTableId: !Ref PrivateRouteTableUSEAST1B
  #NATPrivateSubnetRouteUSEAST1C:
  #  Type: 'AWS::EC2::Route'
  #  Properties:
  #    DestinationCidrBlock: 0.0.0.0/0
  #    NatGatewayId: !Ref NATGateway
  #    RouteTableId: !Ref PrivateRouteTableUSEAST1C

# These are the values output by the CloudFormation template. Be careful
# about changing any of them, because of them are exported with specific
# names so that the other task related CF templates can use them.
Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSCluster'
    Export:
      Name: !Join [ ':', [ !Ref 'PipelineName', !Ref 'EnvironmentName', 'ClusterName' ] ]
  ECSRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'PipelineName', !Ref 'EnvironmentName', 'ECSRole' ] ]
  ECSTaskExecutionRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSTaskExecutionRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'PipelineName', !Ref 'EnvironmentName', 'ECSTaskExecutionRole' ] ]
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
    Export:
      Name: !Join [ ':', [ !Ref 'PipelineName', !Ref 'EnvironmentName', 'VPCId' ] ]
  PublicSubnetOne:
    Description: Public subnet 1
    Value: !Ref 'PublicSubnetOne'
    Export:
      Name: !Join [ ':', [ !Ref 'PipelineName', !Ref 'EnvironmentName', 'PublicSubnetOne' ] ]
  PublicSubnetTwo:
    Description: Public subnet 2
    Value: !Ref 'PublicSubnetTwo'
    Export:
      Name: !Join [ ':', [ !Ref 'PipelineName', !Ref 'EnvironmentName', 'PublicSubnetTwo' ] ]
  PrivateSubnetOne:
    Description: Private subnet 1
    Value: !Ref 'PrivateSubnetOne'
    Export:
      Name: !Join [ ':', [ !Ref 'PipelineName', !Ref 'EnvironmentName', 'PrivateSubnetOne' ] ]
  PrivateSubnetTwo:
    Description: Private subnet 2
    Value: !Ref 'PrivateSubnetTwo'
    Export:
      Name: !Join [ ':', [ !Ref 'PipelineName', !Ref 'EnvironmentName', 'PrivateSubnetTwo' ] ]
  DBAddress:
    Description: DB Address
    Value: !GetAtt 'PostgresDB.Endpoint.Address'
    Export:
      Name: !Join [ ':', [ !Ref 'PipelineName', !Ref 'EnvironmentName', 'DBAddress' ] ]
  ElastiCacheAddress:
    Description: ElastiCache endpoint address
    Value: !GetAtt ElastiCacheCluster.RedisEndpoint.Address
    Export:
      Name: !Join [ ':', [ !Ref 'PipelineName', !Ref 'EnvironmentName', 'ElastiCacheAddress' ] ]
  PublicSecurityGroup:
    Description: Public Security Group
    Value: !Ref 'PublicSecurityGroup'
    Export:
      Name: !Join [ ':', [ !Ref 'PipelineName', !Ref 'EnvironmentName', 'PublicSecurityGroup' ] ]
  PrivateSecurityGroup:
    Description: Private Security Group
    Value: !Ref 'PrivateSecurityGroup'
    Export:
      Name: !Join [ ':', [ !Ref 'PipelineName', !Ref 'EnvironmentName', 'PrivateSecurityGroup' ] ]
  NetworkLoadBalancer:
    Description: Network Load Balancer for Kong
    Value: !Ref 'NetworkLoadBalancer'
    Export:
      Name: !Join [ ':', [ !Ref 'PipelineName', !Ref 'EnvironmentName', 'NetworkLoadBalancer' ] ]
  NetworkLoadBalancerTargetGroup:
    Description: Network Load Balancer Target Group for Kong
    Value: !Ref 'NetworkLoadBalancerTargetGroup'
    Export:
      Name: !Join [ ':', [ !Ref 'PipelineName', !Ref 'EnvironmentName', 'NetworkLoadBalancerTargetGroup' ] ]

  #ControlPlaneArn:
  #  Export:
  #    Name: !Sub '${AWS::StackName}::ControlPlaneArn'
  #  Value: !GetAtt ControlPlane.Arn
  #ControlPlaneCertificateAuthorityData:
  #  Value: !GetAtt ControlPlane.CertificateAuthorityData
  #ControlPlaneClusterSecurityGroupId:
  #  Export:
  #    Name: !Sub '${AWS::StackName}::ControlPlaneClusterSecurityGroupId'
  #  Value: !GetAtt ControlPlane.ClusterSecurityGroupId
  #EKSClusterStackName:
  #  Value: !Ref 'AWS::StackName'
  #ControlPlaneEndpoint:
  #  Export:
  #    Name: !Sub '${AWS::StackName}::ControlPlaneEndpoint'
  #  Value: !GetAtt ControlPlane.Endpoint
  #FargatePodExecutionRoleArn:
  #  Export:
  #    Name: !Sub '${AWS::StackName}::FargatePodExecutionRoleArn'
  #  Value: !GetAtt FargatePodExecutionRole.Arn
  ##FeatureNATMode:
  ##  Value: Single
  #ControlPlaneSecurityGroup:
  #  Export:
  #    Name: !Sub '${AWS::StackName}::ControlPlaneSecurityGroup'
  #  Value: !Ref ControlPlaneSecurityGroup
  #EKSRoleArn:
  #  Export:
  #    Name: !Sub '${AWS::StackName}::EKSRoleArn'
  #  Value: !GetAtt EKSRole.Arn
  #ClusterSharedNodeSecurityGroup:
  #  Export:
  #    Name: !Sub '${AWS::StackName}::ClusterSharedNodeSecurityGroup'
  #  Value: !Ref ClusterSharedNodeSecurityGroup
